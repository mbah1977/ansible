Chapter 14. Performing Maintenance and Routine Administration of Ansible Tower
Performing Basic Troubleshooting of Ansible Tower
Guided Exercise: Performing Basic Troubleshooting of Ansible Tower
Configuring TLS/SSL for Ansible Tower
Guided Exercise: Configuring TLS/SSL for Ansible Tower
Backing Up and Restoring Ansible Tower
Guided Exercise: Backing Up and Restoring Ansible Tower
Quiz: Performing Maintenance and Routine Administration of Ansible Tower
Summary
Abstract

Goal	Perform routine maintenance and administration of Ansible Tower.
Objectives	
Describe the low-level components of Red Hat Ansible Tower, locate and examine relevant log files, control Ansible Tower services, and perform basic troubleshooting.

Replace the default TLS certificate for Ansible Tower with an updated certificate obtained from a certificate authority.

Back up and restore the Ansible Tower database and configuration files.

Sections	
Performing Basic Troubleshooting of Ansible Tower (and Guided Exercise)

Configuring TLS/SSL for Ansible Tower (and Guided Exercise)

Backing Up and Restoring Ansible Tower (and Guided Exercise)

Quiz	
Maintaining Ansible Tower

Performing Basic Troubleshooting of Ansible Tower
Objectives
After completing this section, students should be able to describe the low-level components of Red Hat Ansible Tower, locate and examine relevant log files, control Ansible Tower services, and perform basic troubleshooting.

Ansible Tower Components
Red Hat Ansible Tower is a web application made up of a number of cooperating processes and services. Four main network services are enabled, which start the rest of the components of Ansible Tower:

Nginx provides the web server that hosts the Ansible Tower application and supports the web UI and the API.

PostgreSQL is the database that stores most Ansible Tower data, configuration, and history.

Supervisord is a process control system that itself manages the various components of the Ansible Tower application to do perform operations such as schedule and run jobs, listen for callbacks from running jobs, and so on.

Rabbitmq-server is an AMQP message broker that supports signaling for the Ansible Tower application components.

A fifth component also used by Ansible Tower is the memcached memory object caching daemon, which is used as a local caching service.

These network services communicate with each other using normal network protocols. For a normal self-contained Ansible Tower server, the main ports that need to be exposed outside the system are 80/tcp and 443/tcp, to allow clients to access the web UI and API.

However, the other services may also expose ports to external clients unless specifically protected. For example, the PostgreSQL service listens for connections from anywhere on 5432/tcp, and the RabbitMQ server beam listens for connections on 5672/tcp, 15672/tcp, and 25672/tcp. If only the local Ansible Tower services need to be able to connect to these ports, it may be desirable to block access to them using the local firewall.

WARNING
This is one reason why setting good passwords for the PostgreSQL and RabbitMQ services in the inventory file used to install Ansible Tower is important. These services can be contacted by internet clients directly by default, and weak passwords may leave them vulnerable to remote attack.

Starting, Stopping, and Restarting Ansible Tower

Ansible Tower ships with a /usr/bin/ansible-tower-service script, which can start, stop, restart, and give the status of the major Ansible Tower services, including the database and message queue components.

[root@tower ~]# ansible-tower-service status
Showing Tower Status
● postgresql.service - PostgreSQL database server
  Loaded: loaded (/usr/lib/systemd/system/postgresql.service; enabled; vendor preset: disabled)
  Active: inactive (dead) since Wed 2018-11-21 04:20:43 EDT; 24min ago
...output omitted...
● nginx.service - The nginx HTTP and reverse proxy server
  Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled)
  Active: active (running) since Wed 2018-11-21 04:20:49 EDT; 24min ago
...output omitted...
● supervisord.service - Process Monitoring and Control Daemon
  Loaded: loaded (/usr/lib/systemd/system/supervisord.service; enabled; vendor preset: disabled)
  Active: active (running) since Wed 2018-11-21 04:20:55 EDT; 23min ago
  Process: 909 ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf (code=exited, status=0/SUCCESS)
Main PID: 1101 (code=exited, status=0/SUCCESS)
To access the list of available options, run the ansible-tower-service command without any options:

[root@tower ~]# ansible-tower-service
Usage: /usr/bin/ansible-tower-service {start|stop|restart|status}
The following example demonstrates restarting the Ansible Tower infrastructure:

[root@tower ~]# ansible-tower-service restart
Restarting Tower
Redirecting to /bin/systemctl stop  postgresql.service
Stopping rabbitmq-server (via systemctl):                  [  OK  ]
Redirecting to /bin/systemctl stop  nginx.service
Redirecting to /bin/systemctl stop  supervisord.service
Redirecting to /bin/systemctl start  postgresql.service
Starting rabbitmq-server (via systemctl):                  [  OK  ]
Redirecting to /bin/systemctl start  nginx.service
Redirecting to /bin/systemctl start  supervisord.service
Supervisord Components

supervisord is a process control system often used to control Django-based applications. It is used to manage and monitor long-running processes or daemons, and to automatically restart them as needed. In Ansible Tower, supervisord manages important components of the Ansible Tower application itself.

You can use the supervisorctl status command to see the list of Ansible Tower processes controlled by the supervisord service:

[root@tower ~]# supervisorctl status
exit-event-listener                       RUNNING   pid 4111, uptime 0:42:55
tower-processes:awx-callback-receiver     RUNNING   pid 4116, uptime 0:42:55
tower-processes:awx-celeryd               RUNNING   pid 4118, uptime 0:42:55
tower-processes:awx-celeryd-beat          RUNNING   pid 4117, uptime 0:42:55
tower-processes:awx-channels-worker       RUNNING   pid 4112, uptime 0:42:55
tower-processes:awx-daphne                RUNNING   pid 4115, uptime 0:42:55
tower-processes:awx-uwsgi                 RUNNING   pid 4113, uptime 0:42:55
As you can see in the preceding output, supervisord controls a number of processes owned by the awx user. One of them is the awx-celeryd daemon, which is used as a real time, distributed message-passing task and job queue.

Ansible Tower Configuration and Log Files
Configuration Files

The main configuration files for Ansible Tower are kept in the /etc/tower directory. These include settings files for the Ansible Tower application which are outside the PostgreSQL database, the TLS certificate for nginx and other key files.

Perhaps the most important of these files for the Ansible Tower application is the /etc/tower/settings.py file, which specifies the locations for job output, project storage, and other directories.

The other individual services may have service-specific configuration files elsewhere on the system, such as the /etc/nginx files used by the web server.

Log Files

The Ansible Tower application log files are stored in one of two centralized locations:

/var/log/tower/

/var/log/supervisor/

Ansible Tower server errors are logged in the /var/log/tower/ directory. Some key files in the /var/log/tower/ directory include:

/var/log/tower/tower.log, the main log for the Ansible Tower application.

/var/log/tower/setup*.log, which are logs of runs of the setup.sh script to install, back up, or restore the Ansible Tower server.

/var/log/tower/task_system.log, which logs various system housekeeping tasks (such as the removal of the record of old job runs).

The /var/log/supervisor/ directory stores log files for services, daemons, and applications managed by supervisord. The supervisord.log file in this directory is the main log file for the service that controls all of these daemons. The other files contain log information about the activity of those daemons.

Ansible Tower can also send detailed logs to external log aggregation services. Log aggregation can offer insight into Ansible Tower technical trends or usage. The data can be used to monitor for anomalies, analyze events, and correlate events. Splunk, Elastic stack/logstash (formerly ELK), Loggly, and Sumologic are all log aggregation and data analysis systems that can be used with Ansible Tower.

More information on how to configure such services is located in the Ansible Tower Administration Guide at https://docs.ansible.com/ansible-tower/latest/html/administration/.

IMPORTANT
This discussion has focused on looking at the log files to troubleshoot problems with the Ansible Tower server itself.

If you encounter errors running playbooks which do not appear to be related to actual errors in the Ansible Tower configuration, remember to look at the output of your launched jobs in the Ansible Tower web UI or the API.

Other Ansible Tower Files

A number of other key files for Ansible Tower are kept in the /var/lib/awx directory. This directory includes:

/var/lib/awx/public/static: for static root directory (this is the location of your Django based application files).

/var/lib/awx/projects: projects root directory (in the subdirectories of this directory Ansible Tower will store project based files - for example git repository files.

/var/lib/awx/job_status: Job status output from playbooks is stored in this file.

Common Troubleshooting Scenarios
Problems Running Playbooks

The default configuration confines playbooks to the /tmp directory and limits what the playbook can access locally on the Ansible Tower server. This can impact tasks that the playbook may delegate to the local system rather than the target host.

Review your license status and the number of unique hosts you have managed by the Ansible Tower server. If the license has expired, or too many hosts are registered, you will not be able to launch jobs.

Problems Connecting To Your Host

If you encounter problems with connectivity errors while running playbooks, try the following:

Verify that you can establish an SSH or WinRM connection with the managed host. Ansible depends upon SSH (or WinRM for Microsoft Windows systems) to access the servers you are managing.

Review your inventory file. Review the host names and IP addresses.

Playbooks Do Not Appear in the List of Job Templates

If your playbooks are not showing up in the Job Template list, review these items:

Review the playbook's YAML syntax and make sure that it can be parsed by Ansible.

Make sure the permissions and ownership of the project path (/var/lib/awx/projects/) are configured correctly so that the awx system user can view the files.

Playbook Stays In Pending State

When you are trying to run a Job and it stays in the Pending state, try the following:

Ensure that the Ansible Tower server has enough memory available and that the services governed by supervisord are running. Run the supervisorctl status command.

Ensure that the partition where the /var/ directory is located has more than 1 GB of space available. Jobs will not complete when there is insufficient free space in the /var/ directory.

Restart the Ansible Tower infrastructure using the ansible-tower-service restart command.

Error: Provided Hosts List Is Empty

If you encounter the error message Skipping: No Hosts Matched when you are trying to run a playbook through Ansible Tower, review the following:

Review and make sure that the host patterns used by the hosts declaration in your play matches the group or host names in the inventory. The host patterns are case sensitive.

Make sure your group names have no spaces and modify them to use underscores or no spaces to ensure that the groups are correctly recognized.

If you have specified a limit in the Job Template, make sure that it is a valid limit and that it matches something in your inventory.

Performing Command-line Management
Ansible Tower ships with the awx-manage command-line utility, which can be used to access detailed internal Ansible Tower information. The awx-manage command must be run as root or as the awx (Ansible Tower) user. This utility is most commonly used to reset the Ansible Tower's admin password and to import an existing static inventory file into the Ansible Tower server.

Changing the Ansible Tower Admin Password

The password for the built-in Ansible Tower System Administrator account, admin, is initially set when the Ansible Tower server is installed. The awx-manage command offers a way to change the administrator password from the command line. To do this, as the root or awx user on the Ansible Tower server, use the changepassword option:

[root@tower ~]# awx-manage changepassword admin
Changing password for user 'admin'
Password: new_password
Password (again): new_password
Password changed successfully for user 'admin'
You can also create a new Ansible Tower superuser, with administrative privileges if needed. To create a new superuser you can use awx-manage with the createsuperuser option.

[root@tower ~]# awx-manage createsuperuser
Username (leave blank to use 'root'): admin3
Email address: admin@demo.example.com
Password: new_password
Password (again): new_password
Superuser created successfully.
REFERENCES
Ansible Tower Administration Guide




