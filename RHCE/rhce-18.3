Configuring Software Bridges
In this section, students learned how to define software bridge network interfaces.

Objectives
After completing this section, students should be able to configure and troubleshoot local software bridges and associated interfaces.

Software bridges
A network bridge is a link-layer device that forwards traffic between networks based on MAC addresses. It learns what hosts are connected to each network, builds a table of MAC addresses, then makes packet forwarding decisions based on that table. A software bridge can be used in a Linux environment to emulate a hardware bridge. The most common application for software bridges is in virtualization applications for sharing a hardware NIC among one or more virtual NICs.

Configure software bridges
Configuring Software Bridges
The nmcli can be used to configure software bridges persistently. First, the software bridge is created, then existing interfaces are connected to it. For example, the following commands will create a bridge called br0 and attach both the eth1 and eth2 interfaces to it.

[root@demo ~]# nmcli con add type bridge con-name br0 ifname br0
[root@demo ~]# nmcli con add type bridge-slave con-name br0-port1 ifname eth1 master br0
[root@demo ~]# nmcli con add type bridge-slave con-name br0-port2 ifname eth2 master br0
NOTE
NetworkManager can only attach Ethernet interfaces to a bridge. It does not support aggregate interfaces, such as a teamed or bonded interface. These must be configured by manipulating the configuration files in /etc/sysconfig/network-scripts.

Software bridge configuration files

Software bridges are managed by interface configuration files found in the /etc/sysconfig/network-scripts directory. There is an ifcfg-* configuration file for each software bridge.

The following is a sample configuration file for a software bridge:

# /etc/sysconfig/network-scripts/ifcfg-br1
DEVICE=br1
NAME=br1
TYPE=Bridge
BOOTPROTO=none
IPADDR0=172.25.5.100
PREFIX0=24
STP=yes
BRIDGING_OPTS=priority=32768
The TYPE=Bridge definition specifies that this is a software bridge. BRIDGING_OPTS defines additional bridge options. Note that this bridge has been assigned a static IP address.

The following configuration file attaches an Ethernet interface to a software bridge:

# /etc/sysconfig/network-scripts/ifcfg-br1-port0
TYPE=Ethernet
NAME=br1-port0
DEVICE=eth1
ONBOOT=yes
BRIDGE=br1
The single variable definition, BRIDGE=br1, is what ties this interface to the software bridge, br1.

NOTE
To implement a software bridge on an existing teamed or bonded network interface managed by NetworkManager, NetworkManager will have to be disabled since it only supports bridges on simple Ethernet interfaces. Configuration files for the bridge will have to be created by hand. The ifup and ifdown utilities can be used to manage the software bridge and other network interfaces.

The brctl show command will display software bridges and the list of interfaces attached to them.

[root@demo ~]# brctl show
bridge name     bridge id               STP enabled     interfaces
br1            	8000.52540001050b       yes             eth1
REFERENCES
nmcli-examples(5) and brctl(8) man pages






Guided Exercise: Practice: Configuring Software Bridges
In this lab, you will create a network bridge.

Resources:
Files:	/etc/sysconfig/network-scripts/ifcfg-*
Machines:	serverX
Outcomes:

A network bridge called br1 will be attached to the eno1 network interface. It will have a static IP address of 192.168.0.100/24.

Reset the serverX system.

Log into and set up your serverX system.

[student@serverX ~]$ lab teambridge setup
Become the root user.

[student@serverX ~]$ sudo -i
Define a software bridge called br1 and assign it a static IPv4 address of 192.168.0.100/24.

Use nmcli to create the software bridge.

[root@serverX ~]# nmcli con add type bridge con-name br1 ifname br1
Connection 'br1' (d9d56520-574a-4e2a-9f43-b593a1bdff61) successfully added.
Configure the IPv4 addressing for the interface.

[root@serverX ~]# nmcli con mod br1 ipv4.addresses 192.168.0.100/24
[root@serverX ~]# nmcli con mod br1 ipv4.method manual
Attach the eno1 interface to the br1 software bridge.

[root@serverX ~]# nmcli con add type bridge-slave con-name br1-port0 ifname eno1 master br1
Connection 'br1-port0' (5f5e7ea8-b507-4c10-a61f-779369cf82ee) successfully added.
Inspect the configuration files that were created for the software bridge by NetworkManager. Look for variables that connect the two interfaces.

[root@serverX ~]# cat /etc/sysconfig/network-scripts/ifcfg-br1
DEVICE=br1
STP=yes
TYPE=Bridge
BOOTPROTO=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
NAME=br1
UUID=d9d56520-574a-4e2a-9f43-b593a1bdff61
ONBOOT=yes
IPADDR0=192.168.0.100
PREFIX0=24
BRIDGING_OPTS=priority=32768
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
[root@serverX ~]# cat /etc/sysconfig/network-scripts/ifcfg-br1-port0
TYPE=Ethernet
NAME=br1-port0
UUID=5f5e7ea8-b507-4c10-a61f-779369cf82ee
DEVICE=eno1
ONBOOT=yes
BRIDGE=br1
Display the link status of the network interfaces.

[root@serverX ~]# ip link
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT qlen 1000
    link/ether 52:54:00:00:XX:0b brd ff:ff:ff:ff:ff:ff
4: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master br1 state UP mode DEFAULT qlen 1000
    link/ether 00:10:18:2b:98:85 brd ff:ff:ff:ff:ff:ff
6: eno2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT qlen 1000
    link/ether 64:31:50:18:80:8f brd ff:ff:ff:ff:ff:ff
7: br1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT 
    link/ether 00:10:18:2b:98:85 brd ff:ff:ff:ff:ff:ff
Use brctl to display information about software bridges on the system.

[root@serverX ~]# brctl show
bridge name     bridge id               STP enabled     interfaces
br1            	8000.52540001050b       yes             eno1
Ping the local network gateway using the software bridge.

[root@serverX ~]# ping -I br1 192.168.0.254
PING 192.168.0.254 (192.168.0.254) from 192.168.0.100 br1: 56(84) bytes of data.
64 bytes from 192.168.0.254: icmp_seq=10 ttl=64 time=0.520 ms
64 bytes from 192.168.0.254: icmp_seq=11 ttl=64 time=0.470 ms
64 bytes from 192.168.0.254: icmp_seq=12 ttl=64 time=0.339 ms
64 bytes from 192.168.0.254: icmp_seq=13 ttl=64 time=0.294 ms
...Output omitted...

